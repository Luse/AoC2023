import { assertEquals } from "https://deno.land/std@0.207.0/assert/mod.ts";
import { solvePart1, solvePart2 } from "./main.ts";

Deno.test("solvePart1() returns 13", () => {
  assertEquals(solvePart1(`Card 1: 41 48 83 86 17 | 83 86  6 31 17  9 48 53
Card 2: 13 32 20 16 61 | 61 30 68 82 17 32 24 19
Card 3:  1 21 53 59 44 | 69 82 63 72 16 21 14  1
Card 4: 41 92 73 84 69 | 59 84 76 51 58  5 54 83
Card 5: 87 83 26 28 32 | 88 30 70 12 93 22 82 36
Card 6: 31 18 13 56 72 | 74 77 10 23 35 67 36 11`), 13);
});

Deno.test("solvePart2() returns 30", () => {
  assertEquals(solvePart2(`Card 1: 41 48 83 86 17 | 83 86  6 31 17  9 48 53
Card 2: 13 32 20 16 61 | 61 30 68 82 17 32 24 19
Card 3:  1 21 53 59 44 | 69 82 63 72 16 21 14  1
Card 4: 41 92 73 84 69 | 59 84 76 51 58  5 54 83
Card 5: 87 83 26 28 32 | 88 30 70 12 93 22 82 36
Card 6: 31 18 13 56 72 | 74 77 10 23 35 67 36 11`), 30);
});

Deno.test("solvePart2() works with real data", () => {
  assertEquals(solvePart2(`Card   1: 29 21 67 44  6 13 68 15 60 79 | 75 44 60 30 10 68 40 70 36 79  3 13 64 15  4 46 21 22 67 47 73 86 29 53  6
Card   2: 15 61  5 39 42 79  4 81 72 89 | 74 79 20 81 72 85 25 76 36 49 51 18 34 90 57 17 11 24 89 73 19 37 61 54  2
Card   3: 75 31 33 22 49 70 37 98 92 94 |  1 87 73 92 57 94 84 10  5 79 69 74 96 37 40 55 18 21 85 93 71 49 70 22 39
Card   4: 76 59 23 34 55 41 47 92 58  5 | 16 70 56 19 79 30 85 58 88 75 71  5  8 64 12 23  9 46 34  4 94 37 48 82 47
Card   5: 48 77 74 18 44 34 71 38 67  1 |  8 78 73 19 39 50 11 54 69 37 79 18 66 77 52 94 74 34 71  1 48 85 67 95 93`), 31);
});